# Helper script to park the carriage (called from T0 and T1 macros)
[gcode_macro PARK_extruder]
gcode:
	RESPOND MSG="Parking the leftmost extruder"
	#make sure we move the first carriage
	SET_DUAL_CARRIAGE CARRIAGE=0
	{% if not "x" in printer.toolhead.homed_axes %}
	    RESPOND MSG="Homing X"
	    G28 X
	{% endif %}

    SAVE_GCODE_STATE NAME=park0
    G90
	SET_GCODE_OFFSET X=0
    G1 X{printer.configfile.settings.stepper_x.position_min} F12000
    RESTORE_GCODE_STATE NAME=park0

[gcode_macro PARK_extruder1]
gcode:
	RESPOND MSG="Parking the rightmost extruder"
	#make sure we move the second carriage. After all, we do not know which carriage is active
	SET_DUAL_CARRIAGE CARRIAGE=1
	{% if not "x" in printer.toolhead.homed_axes %}
	    RESPOND MSG="Homing X"
	    G28 X
	{% endif %}

    SAVE_GCODE_STATE NAME=park1
    G90
	SET_GCODE_OFFSET X=0
    G1 X{printer.configfile.settings.dual_carriage.position_max} F12000
    RESTORE_GCODE_STATE NAME=park1


[gcode_macro x_xoffset]
# helper script, needed as the variable xoffset will be changed during macro execution
# and macro expansion happens before that

gcode:
	{% set offset = printer["gcode_macro set_stepper_x_range"].xoffset %}
	RESPOND MSG="Xoffset will be set to: { offset }"
    SET_GCODE_OFFSET Y=0 X={ offset }
	


[gcode_macro set_stepper_x_range]
variable_xoffset: 0
variable_range_set: 0
gcode:
    RESPOND MSG="Setting leftmost extruder x-axis origin"
#	{ action_respond_info("Extruder1 temperature target: %s" % printer.extruder1.target ) }
	RESPOND MSG="Extruder1 temperature target: { printer.extruder1.target }"
	{% if   printer.extruder1.target|int > 0 %}
 		RESPOND MSG="Right hand side extruder active"
	    {% set offset= 17 %}
	{% else %}
	    {% set offset=0 %}
	{% endif %}
	SET_GCODE_VARIABLE MACRO=set_stepper_x_range VARIABLE=xoffset VALUE={offset}
	RESPOND MSG="X origin for left head will be set to {offset} mm from left end of bed"
	#make it known that the range has been set for this print, and should not be re-evaluated again
	SET_GCODE_VARIABLE MACRO=set_stepper_x_range VARIABLE=range_set VALUE=1

[gcode_macro clear_stepper_x_range]
gcode:
    RESPOND MSG="Clearing the leftmost extruder x-axis printing range"
	SET_GCODE_VARIABLE MACRO=set_stepper_x_range VARIABLE=xoffset VALUE=0
	#make it known that the range has not been set for this print, and should be re-evaluated again
	SET_GCODE_VARIABLE MACRO=set_stepper_x_range VARIABLE=range_set VALUE=0
	

# Activate the primary extruder
[gcode_macro T0]
gcode:
	RESPOND MSG="Selecting tool T0"
	home_if_not
	{% if printer.toolhead.extruder != "extruder" %}
	    PARK_{printer.toolhead.extruder}
	{% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder
    SET_DUAL_CARRIAGE CARRIAGE=0
	# run the range setting only once, in order not to mis-set it after T1 target temp is set to zero
	{% if  printer["gcode_macro set_stepper_x_range"].range_set  == 0  %}
		RESPOND MSG="Lefttmost extruder X-direction movement range not yet set, setting it now"
		set_stepper_x_range
	{% endif %}
	x_xoffset


[gcode_macro T1]
gcode:
	RESPOND MSG="Selecting tool T1"
	home_if_not
	{% if printer.toolhead.extruder != "extruder1" %}
	    PARK_{printer.toolhead.extruder}
	{% endif %}
    ACTIVATE_EXTRUDER EXTRUDER=extruder1
    SET_DUAL_CARRIAGE CARRIAGE=1
    SET_GCODE_OFFSET X=0.65 Y=-0.03 Z=-0.03	

[gcode_macro home_if_not ]
gcode:
	{% if printer.toolhead.homed_axes != 'xyz' %}
	  G28
    {% endif %}



[gcode_macro prepare_toolheads ]
gcode:
    RESPOND MSG="Preparing the toolheads"
	# BED_MESH_PROFILE LOAD=70c
	# Use absolute coordinates
    G90
	#reset E
	G92 E0
	#Set extruder to relative mode
	M83
	home_if_not
	# explicitly set the range at the start of each new print
	set_stepper_x_range
	{% if   printer.extruder.target|int > 0 %}
	    RESPOND MSG="Preparing T0"
		T0
		SAVE_GCODE_STATE NAME=prime_ext0 
		#Always print the prime line at the very left of the bed
		SET_GCODE_OFFSET X=0 Y=0 
		G0 X-10 Y35 Z0.5  F9000
		# prime in air
		G1 E5 F300
		PRIME_LINE X=3 Y=35 Z=0.2 YLINE=100
		RESTORE_GCODE_STATE NAME=prime_ext0
	{% endif %}
	{% if   printer.extruder1.target|int > 0 %}
	    RESPOND MSG="Preparing T1"
		T1
		G0 X225 Y35 Z0.5 F9000
		G1	E5 F300
		PRIME_LINE X=200 Y=35 Z=0.2 YLINE=100
	{% endif %}
	#set the Tooolhead to what it was when the macro was called. 
	# At least Ideamaker sets the T0/T1 before calling the user-defined macro, 
	# so we need to be know which toolhead was set and switch to that before continuing
	#Jinja expansion happens befor macro is actually executed, so printer.toolhead.extrude in the conditional
	#statement will NOT have been dynamically changed, but is instead the original value at call time.
	
	{% if printer.toolhead.extruder == "extruder1" %}
		T1
	{% else %}
		T0
	{% endif %}
	#set extruder to abs mode
	M82
	{% if  ( (printer.extruder.target|int > 0) and (printer.extruder1.target|int > 0) ) %}
		#Two extruders in use, do nothing
		RESPOND MSG="Two heads in use, Ideamaker does not do retracting"
	{% else %}
	 	#Ideamaker insists on retracting at the start. Now we just make it think it already has. Ugly kluldge, yes.
		RESPOND MSG="One of two heads in use, Ideamaker spoils the print by retracting, so work around it"
		G92 E-0.6
	{% endif %}

[gcode_macro set_temperatures]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER0_TEMP = params.EXTRUDER1_TEMP|default(0)|float %}
    {% set EXTRUDER1_TEMP = params.EXTRUDER2_TEMP|default(0)|float %}
    
	# Start bed heating
    M140 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    M190 S{BED_TEMP}


[gcode_macro START_PRINT]
gcode:
	CLEAR_PAUSE
#    set_temperatures
    RESPOND MSG="Temperatures should be ok now"
	{% if printer["gcode_macro bedmesh"].probe_installed != 0 %}
	   RESPOND TYPE=error MSG="You could have a probe still on. Remove the probe and run the command 'probeoff'"
	   PAUSE
	   CANCEL_PRINT
	{% else %}
		home_if_not
		BED_MESH_LOAD
		prepare_toolheads
	{% endif %}

[gcode_macro PRIME_LINE]
gcode: 
    RESPOND MSG="Printing a priming line "

    {% set x = params.X|default(2)|float %}
    {% set y = params.Y|default(70)|float %}
	{% set z = params.Z|default(0.2)|float %}
    {% set xline = params.XLINE|default(0.8)|float %}
    {% set yline = params.YLINE|default(120)|float %}
	{% set eMultiplier = 0.15 * z  %}
    SAVE_GCODE_STATE NAME=prime_line
 
	M117 Prime Line

    G90 ; XYZ to abs mode
	M83 ; set E to rel mode
    # move z axis 
    G1 Z0.3 F3000 ;Move Z Axis up
    # move to prime position 
	G0 Y{y} Z{z}
    G0 X{x} ;Move to start position. Do a square move to avoid hitting the bed's corner clips
	G1 Y{y + yline} E{eMultiplier * yline} ;Draw the first line
    G1 X{x + xline} E{eMultiplier * xline} ;Move to side a little
    G1 Y{y + 20} E{eMultiplier * (yline - 20)} ;Draw the second line, but do not go back to origin to avoid picking the wipeouts
#	G1 E-0.5 F300
    G1 Z0.5 F3000 ;Move Z Axis up
	
	RESTORE_GCODE_STATE NAME=prime_line

[gcode_macro bedmesh]
variable_probe_installed: 1
gcode:
    {% if printer["gcode_macro bedmesh"].probe_installed == 0 %}
	    RESPOND MSG="Install probe and run then command 'probeon'"
	{% else %}
		RESPOND MSG="Measuring bed mesh with TO, with zero x offset "

		home_if_not
		T0
		SAVE_GCODE_STATE NAME=bedmesh
		#Always measure with raw left head
		G90
		SET_GCODE_OFFSET X=0
		G0 Z10 F5000
#		G0 X110 Y80 F12000
		#"prime" the probe
#		probe
#		G0 Z3
		BED_MESH_CALIBRATE
		G0 Z20 F5000
		RESTORE_GCODE_STATE NAME=bedmesh
	{% endif %}



[gcode_macro probeon]
gcode:
	SET_GCODE_VARIABLE MACRO=bedmesh VARIABLE=probe_installed VALUE=1
	RESPOND MSG="Recorded that you have installed the probe on the left head"

[gcode_macro probeoff]
gcode:
	SET_GCODE_VARIABLE MACRO=bedmesh VARIABLE=probe_installed VALUE=0
	RESPOND MSG="Recorded that you have uninstalled the probe from the left head"



[gcode_macro BED_MESH_LOAD]
description: Load an existing bed calibration mesh for the correct temperature
gcode:
  ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  ##### join everything to a single mesh name #####
  {% set mesh_name = "BED_TEMP-" + bed_temp|string + "C" %}
  ##### end of definitions #####
  {% if printer.configfile.config["bed_mesh " + mesh_name] is defined %}
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={mesh_name}
    RESPOND TYPE=echo MSG="Loaded bed mesh profile of {mesh_name} "
  {% else %}
   RESPOND TYPE=error MSG="Did not find a mesh profile of {mesh_name} "
  {% endif %}

#[gcode_macro renew_all_mesh]
#gcode:
#	{% for t in  [60,65,70] %}
#		RESPOND MSG="Heating  "{t}
#		M190 S{t}
#	{% endfor %}

[gcode_macro END_PRINT]
gcode:
    M117 End printing.
	RESPOND MSG="End printing"
    G91 ; relative positioning
    G1 E-1 F300 ;retract the filament a bit before lifting the nozzle to release some of the pressure
    G1 Z+5 E-2 F1000 ;move Z up a bit and extract a bit more
#   T1
#	T0
#    G90 ; absolute positioning
# 	G0 Y220 F6000 ; make the printed object accessible
    m104 S0 ; turn hotend heating off
	M140 S0 ; tuen hotbed heating off
	G90
	SET_DUAL_CARRIAGE CARRIAGE=0
	G0 X70 Y140 F5000
	SET_DUAL_CARRIAGE CARRIAGE=1
	G0 X170 F5000
    M106 S255 ; turn fan on for cooling
    M84 ; steppers off
	clear_stepper_x_range
	G4 P900000 ;keep fans on for 15 minutes
    M106 S0 ; turn fan off



[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}

    
